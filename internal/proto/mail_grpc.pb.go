// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: mail.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MyMailSerivceClient is the client API for MyMailSerivce service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MyMailSerivceClient interface {
	MyMail(ctx context.Context, in *MyMailRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type myMailSerivceClient struct {
	cc grpc.ClientConnInterface
}

func NewMyMailSerivceClient(cc grpc.ClientConnInterface) MyMailSerivceClient {
	return &myMailSerivceClient{cc}
}

func (c *myMailSerivceClient) MyMail(ctx context.Context, in *MyMailRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mymail.MyMailSerivce/MyMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MyMailSerivceServer is the server API for MyMailSerivce service.
// All implementations must embed UnimplementedMyMailSerivceServer
// for forward compatibility
type MyMailSerivceServer interface {
	MyMail(context.Context, *MyMailRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedMyMailSerivceServer()
}

// UnimplementedMyMailSerivceServer must be embedded to have forward compatible implementations.
type UnimplementedMyMailSerivceServer struct {
}

func (UnimplementedMyMailSerivceServer) MyMail(context.Context, *MyMailRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyMail not implemented")
}
func (UnimplementedMyMailSerivceServer) mustEmbedUnimplementedMyMailSerivceServer() {}

// UnsafeMyMailSerivceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MyMailSerivceServer will
// result in compilation errors.
type UnsafeMyMailSerivceServer interface {
	mustEmbedUnimplementedMyMailSerivceServer()
}

func RegisterMyMailSerivceServer(s grpc.ServiceRegistrar, srv MyMailSerivceServer) {
	s.RegisterService(&MyMailSerivce_ServiceDesc, srv)
}

func _MyMailSerivce_MyMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyMailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyMailSerivceServer).MyMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mymail.MyMailSerivce/MyMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyMailSerivceServer).MyMail(ctx, req.(*MyMailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MyMailSerivce_ServiceDesc is the grpc.ServiceDesc for MyMailSerivce service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MyMailSerivce_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mymail.MyMailSerivce",
	HandlerType: (*MyMailSerivceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MyMail",
			Handler:    _MyMailSerivce_MyMail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mail.proto",
}
